https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-22-04


public IP: 
137.184.124.150

nextmessage.ai

AIM: Installing Nginx
-----------------------

sudo apt update
sudo apt install nginx


sudo systemctl start nginx
sudo systemctl stop nginx
sudo systemctl restart nginx


sudo ufw app list

Output should be:
Output
Available applications:
  Nginx Full
  Nginx HTTP
  Nginx HTTPS
  OpenSSH

sudo ufw allow 'Nginx HTTP'

verify :
sudo ufw status

check your webserver from comd line itself:
systemctl status nginx

to see public ip:
curl -4 icanhazip.com

drvirens@ubuntu-s-1vcpu-512mb-10gb-sfo3-01:~$ curl -4 icanhazip.com
143.198.105.245

Use http://143.198.105.245 from browser




AIM: Create new website with static page [Setting Up Server Blocks (Recommended)]
------------------------------------------

// add server block in nginx

(I) 
replace your_domain with your domain e.g. "nxtmsg.ai"
why -p ? => the -p flag to create any necessary parent directories:

sudo mkdir -p /var/www/your_domain/html
---->> sudo mkdir -p /var/www/nxtmsg.ai/html

(II) assign ownership of the directory with the $USER environment variable:

---->> sudo chown -R $USER:$USER /var/www/nxtmsg.ai/html

(III) permissions to files : read, write , execute
The permissions of your web roots should be correct if you haven’t modified your umask value, which sets default file permissions. 

To ensure that your permissions are correct and allow the owner to read, write, and execute the files while granting only read and execute permissions to groups and others, you can input the following command:

---->> sudo chmod -R 755 /var/www/nxtmsg.ai

(IV) create HTML page
create a sample index.html page using nano or your favorite editor

---->> sudo nano /var/www/nxtmsg.ai/html/index.html

(V) Add HTML contents
Inside, add the following sample HTML:
<html>
    <head>
        <title>Welcome to nxtmsg.ai!</title>
    </head>
    <body>
        <h1>Success!  The domain [nxtmsg.ai] server block is working!</h1>
    </body>
</html>

Save and close the file by pressing Ctrl+X to exit, then when prompted to save, Y and then Enter.

(VI) create server block now:
In order for Nginx to serve this content, it’s necessary to create a server block with the correct directives. Instead of modifying the default configuration file directly, let’s make a new one at /etc/nginx/sites-available/your_domain:

---->> sudo nano /etc/nginx/sites-available/nxtmsg.ai

Paste in the following configuration block, which is similar to the default, but updated for our new directory and domain name:

server {
        listen 80;
        listen [::]:80;

        root /var/www/nxtmsg.ai/html;
        index index.html index.htm index.nginx-debian.html;

        server_name nxtmsg.ai www.nxtmsg.ai;

        location / {
                try_files $uri $uri/ =404;
        }
}

Notice that we’ve updated the root configuration to our new directory, and the server_name to our domain name.


(VII) Create a link from it to sites-enabled dir:
let’s enable the file by creating a link from it to the sites-enabled directory, which Nginx reads from during startup:

---->> sudo ln -s /etc/nginx/sites-available/nxtmsg.ai /etc/nginx/sites-enabled/

PS: Note: Nginx uses a common practice called symbolic links, or symlinks, to track which of your server blocks are enabled. Creating a symlink is like creating a shortcut on disk, so that you could later delete the shortcut from the sites-enabled directory while keeping the server block in sites-available if you wanted to enable it.

(VIII) 2 server blocks enabled:
Two server blocks are now enabled and configured to respond to requests based on their listen and server_name directives (you can read more about how Nginx processes these directives here):

your_domain: Will respond to requests for your_domain and www.your_domain.
default: Will respond to any requests on port 80 that do not match the other two blocks.


(IX) Avoid Hash Bucket memory problem:

To avoid a possible hash bucket memory problem that can arise from adding additional server names, it is necessary to adjust a single value in the /etc/nginx/nginx.conf file. Open the file:

---->> sudo nano /etc/nginx/nginx.conf

Find the server_names_hash_bucket_size directive and remove the # symbol to uncomment the line. If you are using nano, you can quickly search for words in the file by pressing CTRL and w.

/etc/nginx/nginx.conf
...
http {
    ...
    server_names_hash_bucket_size 64;
    ...
}
...

Save and close the file when you are finished.

(X) test:
test to make sure that there are no syntax errors in any of your Nginx files:

---->> sudo nginx -t

(XI) restart:

If there aren’t any problems, restart Nginx to enable your changes:
---->> sudo systemctl restart nginx

Nginx should now be serving your domain name. You can test this by navigating to http://your_domain, where you should see something like this:

Success!  The your_domain server block is working!









https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04